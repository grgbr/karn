def run_stages(String job_name)
{
	// Ensure job was configured as a multibranch pipeline and named
	// according the following convention :
	//   <arbritrary_string>-karn-<build_config_name>
	//
	// If this is the case, Jenkins will invoke our pipeline with the global
	// variable set to:
	//   <prefix>-karn-<build_config_name>/<branch_name>
	def job = job_name.tokenize('/')
	assert job.size() == 2
	job = job[0].tokenize('-')
	assert job.size() > 2
	assert job[job.size() - 2] == 'karn'
	job = job[job.size() - 1]

	def prefix = job_name.tokenize('-')[0]
	def project = "/${prefix}-cute/master"

	properties([
		pipelineTriggers([
			upstream(threshold: 'SUCCESS', upstreamProjects: project)
		])
	])

	def topdir = pwd()
	withEnv(["PKG_CONFIG_PATH+CUTE=${topdir}/root/lib/pkgconfig",
	         "LD_LIBRARY_PATH+CUTE=${topdir}/root/lib"]) {
		stage ('Artifact') {
			step([
				$class: 'CopyArtifact',
				fingerprintArtifacts: true,
				projectName: project,
				selector: [$class: 'StatusBuildSelector', stable: true]
			])
		}
		stage('Config') {
			sh "make defconfig-${job}"
		}
		stage('Build') {
			sh 'make build'
		}
		stage('Test') {
			sh 'make test'
		}
		stage('Check') {
			sh 'make check'

			step([
				$class: 'XUnitBuilder',
				// Give the report time margin value in ms, before to fail if not
				// new unless the option requireupdate is set for the configured
				// framework.
				testTimeMargin: '3000',
				// 1: absolute numbers, 2: percent
				thresholdMode: 2,
				thresholds: [
					[
						// Failed tests related thresholds
						$class: 'FailedThreshold',
						// If the total number of failed tests exceeds this
						// threshold then a build is considered as failed. Leave
						// this field empty if the failure state of the build
						// should not depend on the total number of new failed
						// tests.
						failureNewThreshold: '',
						// If the total number of failed exceeds this threshold then
						// a build is considered as failed. Leave this field empty
						// if the unstable state of the build should not depend on
						// the total number of failed tests.
						failureThreshold: '5',
						// According the threshold mode, if the total number (or the
						// percent) of failed tests exceeds this threshold then a
						// build is considered as unstable. Leave this field empty
						// if the unstable state of the build should not depend on
						// the total number of new failed tests.
						unstableNewThreshold: '',
						// According the threshold mode, if the total number (or the
						// percent) of failed tests exceeds this threshold then a
						// build is considered as unstable. Leave this field empty
						// if the unstable state of the build should not depend on
						// the total number of failed tests.
						unstableThreshold: '2'
					],
					[
						// Skipped tests related thresholds
						$class: 'SkippedThreshold',
						// If the total number of skipped tests exceeds this
						// threshold then a build is considered as failed. Leave
						// this field empty if the unstable state of the build
						// should not depend on the total number of new skipped
						// tests.
						failureNewThreshold: '',
						// If the total number of skipped exceeds this threshold
						// then a build is considered as failed. Leave this field
						// empty if the failure state of the build should not
						// depend on the total number of skipped tests.
						failureThreshold: '',
						// If the total number of skipped tests exceeds this
						// threshold then a build is considered as unstable. Leave
						// this field empty if the unstable state of the build
						// should not depend on the total number of new skipped
						// tests.
						unstableNewThreshold: '',
						// If the total number of skipped tests exceeds this
						// threshold then a build is considered as unstable. Leave
						// this field empty if the unstable state of the build
						// should not depend on the total number of skipped tests.
						unstableThreshold: ''
					]
				],
				tools: [
					[
						$class: 'JUnitType',
						// Delete temporary JUnit files.
						deleteOutputFiles: true,
						// Fail the build if test results were not updated this
						// run.
						failIfNotNew: false,
						// Input JUnit compliant tests results
						pattern: 'build/karn_ut.xml',
						// Skip parsing this xUnit type report if there are no test
						// reports files.
						skipNoTestFiles: false,
						// Fail the build whenever an error occur during a result
						// file processing.
						stopProcessingIfError: true
					]
				]
			])
		}
		stage('Coverage') {
			sh 'make cov'

			step([
				$class: 'CoberturaPublisher',
				// Health threshold increases with past builds
				autoUpdateHealth: false,
				// Stability threshold increases with past builds
				autoUpdateStability: false,
				// Input coverage report
				coberturaReportFile: 'build/karn_cov.xml',
				// Fail build if below health threshold
				failUnhealthy: false,
				// Fail build if below stability threshold
				failUnstable: true,
				// Record coverage history for this number of past builds
				maxNumberOfBuilds: 0,
				// Consider stable builds only
				onlyStable: false,
				sourceEncoding: 'UTF_8',
				// Zoom the coverage chart and crop area below the minimum and above
				// the maximum coverage of the past reports
				zoomCoverageChart: true,
				// Fail builds if no coverage reports are found
				failNoReports: true
			])
		}
	}
}

node {
	deleteDir()
	checkout scm

	run_stages(JOB_NAME)
}
